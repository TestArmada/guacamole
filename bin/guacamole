#!/usr/bin/env node

var argv = require("yargs").argv;
var browsers = require("../src/browsers");
var listBrowsers = require("../src/cli_list");
var project = require("../package.json");
var fs = require("fs");
var path = require("path");
var shrinkwrapFilepath = path.resolve("./guacamole-shrinkwrap.json");
var request = require("request");

var fields = [].concat(browsers.CAPABILITY_FIELDS, browsers.INTERNAL_FIELDS);

var cli = function () {
  // Filter by fields because we don't want to accidentally use stuff like --help as a desiredCapabilities filter
  var specs = {};
  fields.forEach(function (field) {
    if (argv[field]) {
      specs[field] = argv[field];
    }
  });

  if (Object.keys(specs).length > 0) {
    var result = browsers.get(specs);
    if (result && result.length > 0) {
      console.log(JSON.stringify(result, null, 2));
    } else {
      console.log("Browsers that match the following specs could not be found: ", specs);
    }
  } else {
    if (argv.help) {
      console.log("Matching options: ")
      fields.forEach(function (field) {
        console.log("  --" + field + "=xxxxx");
      });
      console.log("Other Options:");
      console.log("  --generate-shrinkwrap       Cache a SauceLabs browser API result and store it to disk");
      console.log("  --shrinkwrap                Use the stored shrinkwrap when performing queries (skip network)");
      console.log("  --shrinkwrap=path/to/file   Use a specific shrinkwrap file");
      console.log(project.name + " v" + project.version);
    } else if (argv["generate-shrinkwrap"]) {
      var file = fs.createWriteStream(shrinkwrapFilepath);
      request(browsers.SAUCE_URL, function (err, response) {
        if (err) {
          console.log("Could not fetch sauce data from API at " + browsers.SAUCE_URL);
          process.exit(1);
          return;
        }
        fs.writeFileSync(shrinkwrapFilepath, JSON.stringify(JSON.parse(response.body), null, 2));
        console.log("Wrote guacamole shrinkwrap to " + shrinkwrapFilepath);
      });
    } else {
      listBrowsers();
    }
  }
};

if (argv.shrinkwrap) {
  if (typeof argv.shrinkwrap === "string" && argv.shrinkwrap.length > 0) {
    browsers.useShrinkwrap(argv.shrinkwrap);
  } else {
    browsers.useShrinkwrap(shrinkwrapFilepath);
  }
  cli();
} else {
  browsers.initialize()
    .then(cli)
    .catch(function (err) {
      console.log("error:", err);
    });
}