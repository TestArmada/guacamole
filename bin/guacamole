#!/usr/bin/env node
"use strict";
/* eslint no-lonely-if: 0, no-process-exit: 0, no-console: 0, no-magic-numbers: 0 */

const argv = require("yargs").argv;
const browsers = require("../src/browsers");
const listBrowsers = require("../src/cli_list");
const project = require("../package.json");
const fs = require("fs");
const path = require("path");
const shrinkwrapFilepath = path.resolve("./guacamole-shrinkwrap.json");
const request = require("request");

const fields = [].concat(browsers.CAPABILITY_FIELDS, browsers.INTERNAL_FIELDS);

const cli = () => {
  // Filter by fields because we don't want to accidentally use
  // stuff like --help as a desiredCapabilities filter
  const specs = {};
  fields.forEach((field) => {
    if (argv[field]) {
      specs[field] = argv[field];
    }
  });

  if (Object.keys(specs).length > 0) {
    const result = browsers.get(specs);
    if (result && result.length > 0) {
      console.log(JSON.stringify(result, null, 2));
    } else {
      console.log("Browsers that match the following specs could not be found: ", specs);
    }
  } else {
    if (argv.help) {
      console.log("Matching options: ");
      fields.forEach((field) => {
        console.log(`  --${field}=xxxxx`);
      });
      console.log("Other Options:");
      console.log(
        "  --generate-shrinkwrap       " +
        "Cache a SauceLabs browser API result and store it to disk");
      console.log(
        "  --shrinkwrap                " +
        "Use the stored shrinkwrap when performing queries (skip network)");
      console.log("  --shrinkwrap=path/to/file   Use a specific shrinkwrap file");
      console.log(`${project.name} v${project.version}`);
    } else if (argv["generate-shrinkwrap"]) {
      fs.createWriteStream(shrinkwrapFilepath);
      request(browsers.SAUCE_URL, (err, response) => {
        if (err) {
          console.log(`Could not fetch sauce data from API at ${browsers.SAUCE_URL}`);
          process.exit(1);
          return;
        }
        fs.writeFileSync(shrinkwrapFilepath, JSON.stringify(JSON.parse(response.body), null, 2));
        console.log(`Wrote guacamole shrinkwrap to ${shrinkwrapFilepath}`);
      });
    } else {
      listBrowsers((browserTable) => {
        console.log(browserTable.toString());
      });
    }
  }
};

if (argv.shrinkwrap) {
  if (typeof argv.shrinkwrap === "string" && argv.shrinkwrap.length > 0) {
    browsers.useShrinkwrap(argv.shrinkwrap);
  } else {
    browsers.useShrinkwrap(shrinkwrapFilepath);
  }

  if (typeof argv.device_additions === "string" && argv.device_additions.length > 0) {
    browsers.addNormalizedBrowsersFromFile(argv.device_additions);
  }

  cli();
} else {
  browsers.initialize()
    .then(() => {
      if (typeof argv.device_additions === "string" && argv.device_additions.length > 0) {
        browsers.addNormalizedBrowsersFromFile(argv.device_additions);
      }
    })
    .then(cli)
    .catch((err) => {
      console.log("error:", err);
      console.log(err.stack);
    });
}
