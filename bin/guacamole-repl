#!/usr/bin/env node
"use strict";
/* eslint filenames/filenames: 0, new-cap: 0, no-magic-numbers: 0 */

const vorpal = require("vorpal")();
const util = require("util");
const Promise = require("bluebird");
const path = require("path");
const _ = require("lodash");
const guacamole = require(path.resolve(__dirname, "../src/browsers"));

let browserInput = null;
let versionInput = null;
let platformInput = null;
let deviceNameInput = null;

vorpal
  .command("desktop", "Get saucelabs id for desktop browsers")
  .action((args, cb) => {
    const promptPromise = (opt) => {
      return new Promise((resolve) => {
        vorpal.prompt(opt, (result) => {
          resolve(result);
        });
      });
    };

    return promptPromise({
      type: "input",
      name: "browser",
      message: "> Which browser do you prefer? "
    })
      .then((result) => {
        vorpal.log(util.format("Browser: %s", result.browser));
        browserInput = result.browser;

        return promptPromise({
          type: "input",
          name: "version",
          message: "> Which version do you prefer? "
        });
      })
      .then((result) => {
        vorpal.log(util.format("Version: %s", result.version));
        versionInput = result.version;

        return promptPromise({
          type: "input",
          name: "platform",
          message: "> Which platform do you prefer? "
        });
      })
      .then((result) => {
        vorpal.log(util.format("Platform: %s", result.platform));
        platformInput = result.platform;
        // search in guacamole with given criteria
        vorpal.log("> Generating sauce browser id...");

        return guacamole.initialize();
      })
      .then(() => {
        const candidates = guacamole.filter((capability) => {
          if (capability.desiredCapabilities.browserName) {
            return browserInput.toLowerCase() ===
              capability.desiredCapabilities.browserName.toLowerCase();
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(guacamole.filter((capability) => {
            return !capability.desiredCapabilities.deviceName;
          }), "desiredCapabilities.browserName")).join(",");

          // prompt proper options for browser type
          return new Promise.reject(
            new Error(util.format("Browser %s doesn't exist, you can choose from [%s]",
              browserInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((browsers) => {
        const candidates = browsers.filter((capability) => {
          if (capability.desiredCapabilities.version) {
            return versionInput === capability.desiredCapabilities.version;
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(browsers, "desiredCapabilities.version")).join(",");

          // prompt proper options for browser version
          return new Promise.reject(
            new Error(util.format("Version %s@%s doesn't exist, you can choose from [%s]",
              browserInput, versionInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((browsers) => {
        const candidates = browsers.filter((capability) => {
          if (capability.desiredCapabilities.platform) {
            return platformInput.toLowerCase() ===
              capability.desiredCapabilities.platform.toLowerCase();
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(browsers, "desiredCapabilities.platform")).join(",");

          // prompt proper options for platform
          return new Promise.reject(
            new Error(util.format("Platform %s for %s@%s doesn't exist, you can choose from [%s]",
              platformInput, browserInput, versionInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })

      .then((browsers) => {
        browsers.forEach((browser) => {
          vorpal.log(util.format("> Use %s as your browser", browser.id));
        });
      })
      .catch((err) => {
        vorpal.log(">", err.message);
      })
      .finally(() => {
        deviceNameInput = null;
        browserInput = null;
        versionInput = null;
        platformInput = null;
        cb();
      });
  });

vorpal
  .command("appium", "Get saucelabs id for appium test")
  .action((args, cb) => {
    const promptPromise = (opt) => {
      return new Promise((resolve) => {
        vorpal.prompt(opt, (result) => {
          resolve(result);
        });
      });
    };

    return promptPromise({
      type: "input",
      name: "platform",
      message: "> Which platform do you prefer? "
    })
      .then((result) => {
        vorpal.log(util.format("Platform: %s", result.platform));
        platformInput = result.platform;

        return promptPromise({
          type: "input",
          name: "version",
          message: "> Which version do you prefer? "
        });
      })
      .then((result) => {
        vorpal.log(util.format("Version: %s", result.version));
        versionInput = result.version;

        return promptPromise({
          type: "deviceName",
          name: "name",
          message: "> Which device name do you prefer? "
        });
      })
      .then((result) => {
        vorpal.log(util.format("Device name: %s", result.name));
        deviceNameInput = result.name;
        // search in guacamole with given criteria
        vorpal.log("> Generating sauce appium id...");

        return guacamole.initialize();
      })
      .then(() => {
        const candidates = guacamole.filter((capability) => {
          return !!capability.desiredCapabilities["appium-version"];
        });

        return Promise.resolve(candidates);
      })
      .then((devices) => {
        const candidates = devices.filter((capability) => {
          if (capability.desiredCapabilities.platform) {
            return platformInput.toLowerCase() ===
              capability.desiredCapabilities.platform.toLowerCase();
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(devices, "desiredCapabilities.platform")).join(",");

          // prompt proper options for browser type
          return new Promise.reject(
            new Error(util.format("Platform %s doesn't exist, you can choose from [%s]",
              platformInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((devices) => {
        const candidates = devices.filter((capability) => {
          if (capability.desiredCapabilities.platformVersion) {
            return versionInput === capability.desiredCapabilities.platformVersion;
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(devices, "desiredCapabilities.platformVersion"))
            .join(",");

          // prompt proper options for browser version
          return new Promise.reject(
            new Error(util.format("Version %s@%s doesn't exist, you can choose from [%s]",
              platformInput, versionInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((devices) => {
        const candidates = devices.filter((capability) => {
          if (capability.desiredCapabilities.platform) {
            return capability.desiredCapabilities.deviceName.toLowerCase()
              .indexOf(deviceNameInput.toLowerCase()) > -1;
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(devices, "desiredCapabilities.deviceName")).join(",");

          // prompt proper options for device name
          return new Promise.reject(
            new Error(util.format(
              "Device name %s for %s@%s doesn't exist, you can choose from [%s]",
              deviceNameInput, platformInput, versionInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })

      .then((browsers) => {
        browsers.forEach((browser) => {
          vorpal.log(util.format("> Use %s as your appium id", browser.id));
        });
      })
      .catch((err) => {
        vorpal.log(">", err.message);
      })
      .finally(() => {
        deviceNameInput = null;
        browserInput = null;
        versionInput = null;
        platformInput = null;
        cb();
      });
  });

vorpal
  .command("webkit", "Get saucelabs id for mobile browsers")
  .action((args, cb) => {
    const promptPromise = (opt) => {
      return new Promise((resolve) => {
        vorpal.prompt(opt, (result) => {
          resolve(result);
        });
      });
    };

    return promptPromise({
      type: "input",
      name: "name",
      message: "> Which device name do you prefer? "
    })
      .then((result) => {
        vorpal.log(util.format("Device name: %s", result.name));
        deviceNameInput = result.name;

        return promptPromise({
          type: "input",
          name: "version",
          message: "> Which os version do you prefer? "
        });
      })
      .then((result) => {
        vorpal.log(util.format("Version: %s", result.version));
        versionInput = result.version;


        vorpal.log("> Generating sauce appium id...");

        return guacamole.initialize();
      })
      .then(() => {
        const candidates = guacamole.filter((capability) => {
          return !capability.desiredCapabilities["appium-version"]
            && capability.desiredCapabilities.deviceName;
        });

        return Promise.resolve(candidates);
      })
      .then((devices) => {
        const candidates = devices.filter((capability) => {
          if (capability.desiredCapabilities.deviceName) {
            return capability.desiredCapabilities.deviceName.toLowerCase()
              .indexOf(deviceNameInput.toLowerCase()) > -1;
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(devices, "desiredCapabilities.deviceName")).join(",");

          // prompt proper options for browser type
          return new Promise.reject(
            new Error(util.format("Device name %s doesn't exist, you can choose from [%s]",
              deviceNameInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((devices) => {
        const candidates = devices.filter((capability) => {
          if (capability.desiredCapabilities.version) {
            return versionInput === capability.desiredCapabilities.version;
          }

          return false;
        });

        if (candidates.length === 0) {
          const availabilities = _.uniq(_.map(devices, "desiredCapabilities.version")).join(",");

          // prompt proper options for browser version
          return new Promise.reject(
            new Error(util.format("Version %s for %s doesn't exist, you can choose from [%s]",
              versionInput, deviceNameInput, availabilities)));
        }

        return new Promise.resolve(candidates);
      })
      .then((browsers) => {
        browsers.forEach((browser) => {
          vorpal.log(util.format("> Use %s as your appium id", browser.id));
        });
      })
      .catch((err) => {
        vorpal.log(">", err.message);
      })
      .finally(() => {
        deviceNameInput = null;
        browserInput = null;
        versionInput = null;
        platformInput = null;
        cb();
      });
  });

vorpal
  .delimiter("guacamole$")
  .show();
